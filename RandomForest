{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled3.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyM48HdkcXKmWqBC6cMYfQ8t",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/shreyal18ss/pyCodes/blob/master/RandomForest\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CiH6Sq16z_-f",
        "colab_type": "code",
        "outputId": "89b842e5-117d-4284-c1de-7474bc293e3d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "import sklearn.datasets as datasets\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n",
        "iris = datasets.load_iris()  # Loading the data set\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(iris.data, iris.target,\n",
        "           stratify=iris.target,                  random_state=30)\n",
        "print(X_train.shape)\n",
        "print(X_test.shape)\n",
        "\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "rf_classifier = RandomForestClassifier()\n",
        "\n",
        "rf_classifier = rf_classifier.fit(X_train, Y_train) \n",
        "\n",
        "print('Accuracy of Train Data :', rf_classifier.score(X_train,Y_train))\n",
        "\n",
        "print('Accuracy of Test Data :', rf_classifier.score(X_test,Y_test))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(112, 4)\n",
            "(38, 4)\n",
            "Accuracy of Train Data : 1.0\n",
            "Accuracy of Test Data : 0.9210526315789473\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dX_mI0a00B-X",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "U552xE_-0Mqx",
        "colab_type": "code",
        "outputId": "07cd2942-6698-48fd-9cfc-1f04558eaa6a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 52
        }
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "import sklearn.datasets as datasets\n",
        "import numpy as np\n",
        "np.random.seed=100\n",
        "\n",
        "\n",
        "boston = datasets.load_boston()\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(boston.data, boston.target,random_state=30)\n",
        "\n",
        "print(X_train.shape)\n",
        "print(X_test.shape)"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(379, 13)\n",
            "(127, 13)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YGFaP2Dm3Arz",
        "colab_type": "code",
        "outputId": "3d13fa95-e197-4bd5-b229-d9a63b020b76",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 277
        }
      },
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "rf_reg = RandomForestRegressor()\n",
        "rf_reg = rf_reg.fit(X_train, Y_train) \n",
        "\n",
        "print(rf_reg.score(X_train,Y_train))\n",
        "print(rf_reg.score(X_test,Y_test))\n",
        "# print(X_test[:2,:])\n",
        "# print(X_test[:2])\n",
        "\n",
        "value=rf_reg.predict(X_test[:2,:])\n",
        "print(value)"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.9828993171746189\n",
            "0.8973291492543419\n",
            "[[8.52040e-01 0.00000e+00 8.14000e+00 0.00000e+00 5.38000e-01 5.96500e+00\n",
            "  8.92000e+01 4.01230e+00 4.00000e+00 3.07000e+02 2.10000e+01 3.92530e+02\n",
            "  1.38300e+01]\n",
            " [2.20511e+01 0.00000e+00 1.81000e+01 0.00000e+00 7.40000e-01 5.81800e+00\n",
            "  9.24000e+01 1.86620e+00 2.40000e+01 6.66000e+02 2.02000e+01 3.91450e+02\n",
            "  2.21100e+01]]\n",
            "[[8.52040e-01 0.00000e+00 8.14000e+00 0.00000e+00 5.38000e-01 5.96500e+00\n",
            "  8.92000e+01 4.01230e+00 4.00000e+00 3.07000e+02 2.10000e+01 3.92530e+02\n",
            "  1.38300e+01]\n",
            " [2.20511e+01 0.00000e+00 1.81000e+01 0.00000e+00 7.40000e-01 5.81800e+00\n",
            "  9.24000e+01 1.86620e+00 2.40000e+01 6.66000e+02 2.02000e+01 3.91450e+02\n",
            "  2.21100e+01]]\n",
            "[19.234 10.066]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9yCokO_K3tk-",
        "colab_type": "code",
        "outputId": "1d2d9d90-aa10-432a-c61b-fbfe720ae18e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 87
        }
      },
      "source": [
        "# Build multiple Random forest regressor on X_train set and Y_train labels with\n",
        "# max_depth parameter value changing from 3 to 5 and also setting n_estimators to one of 50, 100, 200 values.\n",
        "\n",
        "depth=range(3,6)\n",
        "estimator=[50,100,200]\n",
        "params=zip(depth,estimator)\n",
        "\n",
        "max_depth=0\n",
        "max_estimator=0\n",
        "accuracy=0\n",
        "\n",
        "for i,j in list(params):\n",
        "  #Fine Tuning the Model\n",
        "    rf_reg = RandomForestRegressor(max_depth=i,n_estimators=j)\n",
        "    rf_reg = rf_reg.fit(X_train, Y_train) \n",
        "    z=rf_reg.score(X_test,Y_test)\n",
        "    # print(z,i,j)\n",
        "    if(z>accuracy):\n",
        "      accuracy=z\n",
        "      max_depth=i\n",
        "      max_estimator=j\n",
        "x=(max_depth,max_estimator)\n",
        "print(x)\n"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8428484762560315 3 50\n",
            "0.8516455406492436 4 100\n",
            "0.8664401964402071 5 200\n",
            "(5, 200)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7N1nOlFH5vs1",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HebFVr3F0Txm",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "35202b6e-946c-4162-bd8f-f6fbb9afa874"
      },
      "source": [
        "from sklearn import datasets\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "\n",
        "boston= datasets.load_boston()\n",
        "X_train, X_test, Y_train, Y_test = train_test_split(boston.data, boston.target, random_state=30)\n",
        "max_depth=0\n",
        "max_estimator=0\n",
        "max_reg = None  #<--- add this to represent the regressor with maximum score\n",
        "max_score = 0   #<--- add this to represent maximum score\n",
        "for m in range(3,6) :\n",
        "    for j in [50,100,200]:\n",
        "      rf_reg = RandomForestRegressor(n_estimators =j, max_depth=m)\n",
        "      rf_reg = rf_reg.fit(X_train, Y_train) \n",
        "      rf_reg_score = rf_reg.score(X_test,Y_test)\n",
        "      # print(rf_reg_score)\n",
        "\n",
        "    #add the following three lines this to check score\n",
        "      if rf_reg_score > max_score:\n",
        "        max_score = rf_reg_score\n",
        "        max_reg = rf_reg\n",
        "l=(max_reg.max_depth,max_reg.n_estimators)\n",
        "print(tuple(l))"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(5, 50)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WN1YVWyb2XhS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}